// Generated by gencpp from file op3_tuning_module_msgs/JointTorqueOnOff.msg
// DO NOT EDIT!


#ifndef OP3_TUNING_MODULE_MSGS_MESSAGE_JOINTTORQUEONOFF_H
#define OP3_TUNING_MODULE_MSGS_MESSAGE_JOINTTORQUEONOFF_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace op3_tuning_module_msgs
{
template <class ContainerAllocator>
struct JointTorqueOnOff_
{
  typedef JointTorqueOnOff_<ContainerAllocator> Type;

  JointTorqueOnOff_()
    : joint_name()
    , torque_enable(false)  {
    }
  JointTorqueOnOff_(const ContainerAllocator& _alloc)
    : joint_name(_alloc)
    , torque_enable(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _joint_name_type;
  _joint_name_type joint_name;

   typedef uint8_t _torque_enable_type;
  _torque_enable_type torque_enable;





  typedef boost::shared_ptr< ::op3_tuning_module_msgs::JointTorqueOnOff_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::op3_tuning_module_msgs::JointTorqueOnOff_<ContainerAllocator> const> ConstPtr;

}; // struct JointTorqueOnOff_

typedef ::op3_tuning_module_msgs::JointTorqueOnOff_<std::allocator<void> > JointTorqueOnOff;

typedef boost::shared_ptr< ::op3_tuning_module_msgs::JointTorqueOnOff > JointTorqueOnOffPtr;
typedef boost::shared_ptr< ::op3_tuning_module_msgs::JointTorqueOnOff const> JointTorqueOnOffConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::op3_tuning_module_msgs::JointTorqueOnOff_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::op3_tuning_module_msgs::JointTorqueOnOff_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::op3_tuning_module_msgs::JointTorqueOnOff_<ContainerAllocator1> & lhs, const ::op3_tuning_module_msgs::JointTorqueOnOff_<ContainerAllocator2> & rhs)
{
  return lhs.joint_name == rhs.joint_name &&
    lhs.torque_enable == rhs.torque_enable;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::op3_tuning_module_msgs::JointTorqueOnOff_<ContainerAllocator1> & lhs, const ::op3_tuning_module_msgs::JointTorqueOnOff_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace op3_tuning_module_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::op3_tuning_module_msgs::JointTorqueOnOff_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::op3_tuning_module_msgs::JointTorqueOnOff_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::op3_tuning_module_msgs::JointTorqueOnOff_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::op3_tuning_module_msgs::JointTorqueOnOff_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::op3_tuning_module_msgs::JointTorqueOnOff_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::op3_tuning_module_msgs::JointTorqueOnOff_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::op3_tuning_module_msgs::JointTorqueOnOff_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b5a5bf39f4a0958f049fc5cc9d8fbd8b";
  }

  static const char* value(const ::op3_tuning_module_msgs::JointTorqueOnOff_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb5a5bf39f4a0958fULL;
  static const uint64_t static_value2 = 0x049fc5cc9d8fbd8bULL;
};

template<class ContainerAllocator>
struct DataType< ::op3_tuning_module_msgs::JointTorqueOnOff_<ContainerAllocator> >
{
  static const char* value()
  {
    return "op3_tuning_module_msgs/JointTorqueOnOff";
  }

  static const char* value(const ::op3_tuning_module_msgs::JointTorqueOnOff_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::op3_tuning_module_msgs::JointTorqueOnOff_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string  joint_name\n"
"bool    torque_enable\n"
;
  }

  static const char* value(const ::op3_tuning_module_msgs::JointTorqueOnOff_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::op3_tuning_module_msgs::JointTorqueOnOff_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_name);
      stream.next(m.torque_enable);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointTorqueOnOff_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::op3_tuning_module_msgs::JointTorqueOnOff_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::op3_tuning_module_msgs::JointTorqueOnOff_<ContainerAllocator>& v)
  {
    s << indent << "joint_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.joint_name);
    s << indent << "torque_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.torque_enable);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OP3_TUNING_MODULE_MSGS_MESSAGE_JOINTTORQUEONOFF_H
