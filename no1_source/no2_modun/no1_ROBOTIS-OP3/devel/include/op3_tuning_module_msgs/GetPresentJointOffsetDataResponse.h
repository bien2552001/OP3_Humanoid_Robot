// Generated by gencpp from file op3_tuning_module_msgs/GetPresentJointOffsetDataResponse.msg
// DO NOT EDIT!


#ifndef OP3_TUNING_MODULE_MSGS_MESSAGE_GETPRESENTJOINTOFFSETDATARESPONSE_H
#define OP3_TUNING_MODULE_MSGS_MESSAGE_GETPRESENTJOINTOFFSETDATARESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <op3_tuning_module_msgs/JointOffsetPositionData.h>

namespace op3_tuning_module_msgs
{
template <class ContainerAllocator>
struct GetPresentJointOffsetDataResponse_
{
  typedef GetPresentJointOffsetDataResponse_<ContainerAllocator> Type;

  GetPresentJointOffsetDataResponse_()
    : present_data_array()  {
    }
  GetPresentJointOffsetDataResponse_(const ContainerAllocator& _alloc)
    : present_data_array(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::op3_tuning_module_msgs::JointOffsetPositionData_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::op3_tuning_module_msgs::JointOffsetPositionData_<ContainerAllocator> >> _present_data_array_type;
  _present_data_array_type present_data_array;





  typedef boost::shared_ptr< ::op3_tuning_module_msgs::GetPresentJointOffsetDataResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::op3_tuning_module_msgs::GetPresentJointOffsetDataResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetPresentJointOffsetDataResponse_

typedef ::op3_tuning_module_msgs::GetPresentJointOffsetDataResponse_<std::allocator<void> > GetPresentJointOffsetDataResponse;

typedef boost::shared_ptr< ::op3_tuning_module_msgs::GetPresentJointOffsetDataResponse > GetPresentJointOffsetDataResponsePtr;
typedef boost::shared_ptr< ::op3_tuning_module_msgs::GetPresentJointOffsetDataResponse const> GetPresentJointOffsetDataResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::op3_tuning_module_msgs::GetPresentJointOffsetDataResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::op3_tuning_module_msgs::GetPresentJointOffsetDataResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::op3_tuning_module_msgs::GetPresentJointOffsetDataResponse_<ContainerAllocator1> & lhs, const ::op3_tuning_module_msgs::GetPresentJointOffsetDataResponse_<ContainerAllocator2> & rhs)
{
  return lhs.present_data_array == rhs.present_data_array;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::op3_tuning_module_msgs::GetPresentJointOffsetDataResponse_<ContainerAllocator1> & lhs, const ::op3_tuning_module_msgs::GetPresentJointOffsetDataResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace op3_tuning_module_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::op3_tuning_module_msgs::GetPresentJointOffsetDataResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::op3_tuning_module_msgs::GetPresentJointOffsetDataResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::op3_tuning_module_msgs::GetPresentJointOffsetDataResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::op3_tuning_module_msgs::GetPresentJointOffsetDataResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::op3_tuning_module_msgs::GetPresentJointOffsetDataResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::op3_tuning_module_msgs::GetPresentJointOffsetDataResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::op3_tuning_module_msgs::GetPresentJointOffsetDataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fe3cab7abbd49468a5d502064853404e";
  }

  static const char* value(const ::op3_tuning_module_msgs::GetPresentJointOffsetDataResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfe3cab7abbd49468ULL;
  static const uint64_t static_value2 = 0xa5d502064853404eULL;
};

template<class ContainerAllocator>
struct DataType< ::op3_tuning_module_msgs::GetPresentJointOffsetDataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "op3_tuning_module_msgs/GetPresentJointOffsetDataResponse";
  }

  static const char* value(const ::op3_tuning_module_msgs::GetPresentJointOffsetDataResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::op3_tuning_module_msgs::GetPresentJointOffsetDataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "JointOffsetPositionData[] present_data_array\n"
"\n"
"================================================================================\n"
"MSG: op3_tuning_module_msgs/JointOffsetPositionData\n"
"string  joint_name\n"
"float64 goal_value\n"
"float64 offset_value\n"
"float64 present_value\n"
"int32   p_gain\n"
"int32   i_gain\n"
"int32   d_gain\n"
;
  }

  static const char* value(const ::op3_tuning_module_msgs::GetPresentJointOffsetDataResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::op3_tuning_module_msgs::GetPresentJointOffsetDataResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.present_data_array);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetPresentJointOffsetDataResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::op3_tuning_module_msgs::GetPresentJointOffsetDataResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::op3_tuning_module_msgs::GetPresentJointOffsetDataResponse_<ContainerAllocator>& v)
  {
    s << indent << "present_data_array[]" << std::endl;
    for (size_t i = 0; i < v.present_data_array.size(); ++i)
    {
      s << indent << "  present_data_array[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::op3_tuning_module_msgs::JointOffsetPositionData_<ContainerAllocator> >::stream(s, indent + "    ", v.present_data_array[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OP3_TUNING_MODULE_MSGS_MESSAGE_GETPRESENTJOINTOFFSETDATARESPONSE_H
