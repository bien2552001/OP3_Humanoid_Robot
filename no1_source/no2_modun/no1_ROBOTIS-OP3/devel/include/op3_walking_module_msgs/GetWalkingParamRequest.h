// Generated by gencpp from file op3_walking_module_msgs/GetWalkingParamRequest.msg
// DO NOT EDIT!


#ifndef OP3_WALKING_MODULE_MSGS_MESSAGE_GETWALKINGPARAMREQUEST_H
#define OP3_WALKING_MODULE_MSGS_MESSAGE_GETWALKINGPARAMREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace op3_walking_module_msgs
{
template <class ContainerAllocator>
struct GetWalkingParamRequest_
{
  typedef GetWalkingParamRequest_<ContainerAllocator> Type;

  GetWalkingParamRequest_()
    : get_param(false)  {
    }
  GetWalkingParamRequest_(const ContainerAllocator& _alloc)
    : get_param(false)  {
  (void)_alloc;
    }



   typedef uint8_t _get_param_type;
  _get_param_type get_param;





  typedef boost::shared_ptr< ::op3_walking_module_msgs::GetWalkingParamRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::op3_walking_module_msgs::GetWalkingParamRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetWalkingParamRequest_

typedef ::op3_walking_module_msgs::GetWalkingParamRequest_<std::allocator<void> > GetWalkingParamRequest;

typedef boost::shared_ptr< ::op3_walking_module_msgs::GetWalkingParamRequest > GetWalkingParamRequestPtr;
typedef boost::shared_ptr< ::op3_walking_module_msgs::GetWalkingParamRequest const> GetWalkingParamRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::op3_walking_module_msgs::GetWalkingParamRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::op3_walking_module_msgs::GetWalkingParamRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::op3_walking_module_msgs::GetWalkingParamRequest_<ContainerAllocator1> & lhs, const ::op3_walking_module_msgs::GetWalkingParamRequest_<ContainerAllocator2> & rhs)
{
  return lhs.get_param == rhs.get_param;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::op3_walking_module_msgs::GetWalkingParamRequest_<ContainerAllocator1> & lhs, const ::op3_walking_module_msgs::GetWalkingParamRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace op3_walking_module_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::op3_walking_module_msgs::GetWalkingParamRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::op3_walking_module_msgs::GetWalkingParamRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::op3_walking_module_msgs::GetWalkingParamRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::op3_walking_module_msgs::GetWalkingParamRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::op3_walking_module_msgs::GetWalkingParamRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::op3_walking_module_msgs::GetWalkingParamRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::op3_walking_module_msgs::GetWalkingParamRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d964a0520d7b14bf821ec75afc464385";
  }

  static const char* value(const ::op3_walking_module_msgs::GetWalkingParamRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd964a0520d7b14bfULL;
  static const uint64_t static_value2 = 0x821ec75afc464385ULL;
};

template<class ContainerAllocator>
struct DataType< ::op3_walking_module_msgs::GetWalkingParamRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "op3_walking_module_msgs/GetWalkingParamRequest";
  }

  static const char* value(const ::op3_walking_module_msgs::GetWalkingParamRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::op3_walking_module_msgs::GetWalkingParamRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool            get_param\n"
;
  }

  static const char* value(const ::op3_walking_module_msgs::GetWalkingParamRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::op3_walking_module_msgs::GetWalkingParamRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.get_param);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetWalkingParamRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::op3_walking_module_msgs::GetWalkingParamRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::op3_walking_module_msgs::GetWalkingParamRequest_<ContainerAllocator>& v)
  {
    s << indent << "get_param: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.get_param);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OP3_WALKING_MODULE_MSGS_MESSAGE_GETWALKINGPARAMREQUEST_H
